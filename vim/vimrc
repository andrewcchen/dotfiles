set tabstop=4
set softtabstop=0
set shiftwidth=0
set noexpandtab
set copyindent
set preserveindent

set autoindent
set cindent
set cinoptions+=:0 " do not indent 'case x:'

set hidden
set wildmenu
set showcmd

" Use case insensitive search, except when using capital letters
set ignorecase
set smartcase

set wrap
set linebreak
set nolist  " list disables linebreak

runtime bundle/pathogen/autoload/pathogen.vim
call pathogen#infect()
call pathogen#helptags()

syntax on
set background=dark
let g:jellybeans_use_term_italics = 1
let g:jellybeans_overrides = { 'background': { 'guibg': '000000' } }
colorscheme jellybeans

filetype plugin indent on

let mapleader=","

set pastetoggle=<C-p>

set incsearch
set hlsearch
nnoremap <Leader><Space> :nohlsearch<CR>

set nomodeline

if exists("less_mode") == 0
  highlight ExtraWhitespace ctermbg=red
  match ExtraWhitespace /\s\+$\| \+\ze\t\|[^\t]\zs\t\+/

  " highlight the 81th column on long lines
  " 2match ErrorMsg '\%81v.'

  nnoremap <Leader>w :match ExtraWhitespace // <Bar> :2match ErrorMsg // <CR>
endif

cmap w!! w !sudo tee > /dev/null %

nnoremap <Leader>in :.-1read ~/Templates/

call Preamble#Enable('c,cpp,python')
nnoremap <Leader>fc :call Preamble#Fold()<CR>
" nnoremap <Leader>fo zR
set foldmethod=marker

let g:easytags_async = 1
let g:easytags_auto_highlight = 0
let g:easytags_events = ['BufWritePost']
nnoremap <Leader>tu :UpdateTags
nnoremap <Leader>th :HighlightTags<CR>
nnoremap <C-]> g<C-]>

" Move one line on the screen instead of one actual line
noremap <buffer> <silent> k gk
noremap <buffer> <silent> j gj

" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
